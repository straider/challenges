buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }

    }
    dependencies {
        classpath('com.github.jengelman.gradle.plugins:gradle-processes:0.3.0')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'au.com.dius:pact-jvm-provider-gradle_2.11:2.1.13'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    ext {
        versionFilePath = "$System.env.VERSION_FILE_PATH"
    }

    task loadVersion {
        ext.myVersion = new File("${versionFilePath}/number").text
    }

    task manifestFilter(type: Copy) {
        from 'manifest.yml'
        into new File("$projectDir/../../versioned-manifest")
        expand(version: "${loadVersion.myVersion}")
    }

}

subprojects {
    apply plugin: 'spring-boot'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("au.com.dius:pact-jvm-consumer-junit_2.11:2.1.13")
    }
}

project(':microservices-pact-consumer') {
    test {
      systemProperties['pact.rootDir'] = "$projectDir/../../pacts"
    }

    jar {
        baseName = 'microservices-pact-consumer'
        destinationDir = new File("$projectDir/../../libs")
    }

    jar.doFirst {
        version = new File("${versionFilePath}/number").text
    }
}


project(':microservices-pact-provider') {
    apply plugin: 'au.com.dius.pact'
    apply plugin: 'com.github.johnrengelman.processes'

    ext {
        pactFilePath = "$System.env.PACT_FILE"
    }

    task startProvider(type: com.github.jengelman.gradle.plugins.processes.tasks.JavaFork) {
        classpath = files("$projectDir/../../provider-libs/microservices-pact-provider-${version}.jar")
        classpath += sourceSets.main.runtimeClasspath
        main = 'io.pivotal.microservices.pact.provider.Application'
        doLast {
            Thread.sleep(10000)
        }
    }

    task stopProvider << {
        startProvider.processHandle.abort()
    }

    jar {
        baseName = 'microservices-pact-provider'
        destinationDir = new File("$projectDir/../../provider-libs")
    }

    jar.doFirst {
        version = new File("${versionFilePath}/number").text
    }

    pact {
        serviceProviders {
            fooProvider {
                startProviderTask = 'startProvider'
                terminateProviderTask = 'stopProvider'
                hasPactWith('fooConsumer') {
                    pactFile = file(pactFilePath)
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
